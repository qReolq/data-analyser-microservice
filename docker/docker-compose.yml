version: "3.0"

networks:
  app:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local
  kafka-data:
    driver: local
  zookeeper-data:
    driver: local

services:
  generator:
    image: 'qreol/data-generator-microservice'
    container_name: 'generator'
    networks:
      - app
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_SUBSCRIBE_TOPICS=${KAFKA_SUBSCRIBE_TOPICS}
    ports:
      - "8081:8081"

  analyser:
    image: 'qreol/data-analyser-microservice'
    container_name: 'analyser'
    networks:
      - app
    depends_on:
      - mongo
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
      - KAFKA_SUBSCRIBED_TOPICS=${KAFKA_SUBSCRIBED_TOPICS}
      - MONGO_AUTHENTICATION_DATABASE=${MONGO_AUTHENTICATION_DATABASE}
      - MONGO_DATABASE=${MONGO_DATABASE}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_HOST=${MONGO_HOST}
    ports:
      - "8082:8082"

  store:
    image: 'qreol/data-store-microservice'
    container_name: 'store'
    networks:
      - app
    depends_on:
      - redis
      - kafka
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS}
    ports:
      - "8083:8083"
      - "5005:5005"

  zookeeper:
    image: wurstmeister/zookeeper
    networks:
      - app
    environment:
      - ZOOKEEPER_CLIENT_PORT=${ZOOKEEPER_CLIENT_PORT}
      - ZOOKEEPER_TICK_TIME=${ZOOKEEPER_TICK_TIME}
    ports:
      - '2181:2181'
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka:
    image: wurstmeister/kafka
    networks:
      - app
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=${KAFKA_BROKER_ID}
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ZOOKEEPER_CONNECT=${KAFKA_ZOOKEEPER_CONNECT}
      - KAFKA_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
    ports:
      - '9092:9092'
    volumes:
      - kafka-data:/var/lib/kafka/data

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8090:8080
    networks:
      - app
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=ui
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=${KAFKA_ZOOKEEPER_CONNECT}
    links:
      - kafka
      - zookeeper
    depends_on:
      - kafka

  mongo:
    image: 'mongo:latest'
    container_name: 'mongo'
    networks:
      - app
    ports:
      - "27017:27017"
    env_file:
      - .env
    volumes:
      - mongo-data:/data/db

  redis:
    image: 'redis:7.2-rc-alpine'
    container_name: 'redis'
    networks:
      - app
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis-data:/data
